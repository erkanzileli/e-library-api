type Schema{
    Query: Query
    Mutation: Mutation
}

type Query {
    authors: [Author]
	author(id: Long!): Author
	bookCategories: [BookCategory]
	bookCategory(id: Long!): BookCategory
	books: [Book]
	book(id: Long!): Book
	users: [User]
	user(id: Long!): User
}

type Mutation {
	createAuthor(firstName: String!, lastName: String!): Author
	updateAuthor(id: Long!, firstName: String!, lastName: String!): Author
	deleteAuthor(id: Long!): Boolean

	createBookCategory(name: String!): BookCategory
	updateBookCategory(id: Long!, name: String): BookCategory
	deleteBookCategory(id: Long!): Boolean

	createBook(name: String!, title: String!, description: String, pageCount: Int!, userId: Long!, authorId: Long!, categoryId: Long!): Book
	updateBook(id: Long!, name: String!, title: String!, description: String, pageCount: Int!, authorId: Long!, categoryId: Long!): Book
	deleteBook(id: Long!): Boolean

    transformUser(id: Int!): Boolean
    updateUser(id: Int!,firstName: String,lastName: String, email: String): User
}

type Author{
    id: Long
    firstName: String
    lastName: String
}

type User{
	id: Long
	username: String
	firstName: String
	lastName: String
	email: String
	type: String
	status: Int
	isRequested: Boolean 
}

type Book {
	id: Long
	name: String
	title: String
	description: String
	pageCount: Int
	status: Int
	author: Author
	downloadCount: Int
	likeCount: Int
	user: User
	category: BookCategory

}

type BookCategory{
	id: Long
	name: String
}


















